{
	"info": {
		"_postman_id": "10c72822-83b1-4ab5-b0ff-c59538a09484",
		"name": "Serverest.dev",
		"description": "swagger: [https://serverest.dev](https://serverest.dev)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7897267"
	},
	"item": [
		{
			"name": "Mass Generator",
			"item": [
				{
					"name": "new Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.globals.set('userName', pm.response.json().results[0].name.first)\r",
									"pm.globals.set('userEmail', pm.response.json().results[0].email)\r",
									"pm.globals.set('userPassword', pm.response.json().results[0].login.password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://randomuser.me/api/",
							"protocol": "https",
							"host": [
								"randomuser",
								"me"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "new Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset('product')\r",
									"pm.collectionVariables.unset('price')\r",
									"pm.collectionVariables.unset('description')\r",
									"pm.collectionVariables.unset('amount')\r",
									"\r",
									"let prodId = Math.floor(Math.random() * 19) \r",
									"pm.collectionVariables.set('product', pm.response.json()[prodId].title)\r",
									"pm.collectionVariables.set('price', pm.response.json()[prodId].price)\r",
									"pm.collectionVariables.set('description', pm.response.json()[prodId].description)\r",
									"pm.collectionVariables.set('amount', Math.floor(Math.random() * 20) +1)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			],
			"description": "Generate Random data from API: https://randomuser.me/api/EndFragment"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.json().message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(ajv.validate(pm.globals.get('schema'), pm.response.json()),\r",
									"    JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.globals.set('userID', pm.response.json()['_id'])"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset('schema')\r",
									"pm.globals.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(ajv.validate(pm.globals.get('schema'), pm.response.json()), \r",
									"    JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Validate return type is an object', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if email is correct\", function () {\r",
									"    pm.expect(pm.response.json().email).to.eql(pm.globals.get('userEmail'));\r",
									"});\r",
									"\r",
									"pm.test(\"Validate if _id is correct\", function () {\r",
									"    pm.expect(pm.response.json()._id).to.eql(pm.globals.get('userID'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset('schema')\r",
									"pm.globals.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"nome\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"administrador\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"nome\",\r",
									"    \"email\",\r",
									"    \"password\",\r",
									"    \"administrador\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(ajv.validate(pm.globals.get('schema'), pm.response.json()), \r",
									"    JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Validate return type is an object', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Validate message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Registro alterado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset('schema')\r",
									"pm.globals.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{userName}}\",\r\n  \"email\": \"Update.{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updated User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(ajv.validate(pm.globals.get('schema'), pm.response.json()), \r",
									"    JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Validate return type is an object', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset('schema')\r",
									"pm.globals.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"nome\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"administrador\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"nome\",\r",
									"    \"email\",\r",
									"    \"password\",\r",
									"    \"administrador\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User with success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset('schema')\r",
									"pm.globals.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"nome\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"administrador\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"nome\",\r",
									"    \"email\",\r",
									"    \"password\",\r",
									"    \"administrador\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(ajv.validate(pm.globals.get('schema'), pm.response.json()), \r",
									"    JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('successEmail',pm.response.json().usuarios[0].email)\r",
									"\r",
									"pm.collectionVariables.set('successPassword',pm.response.json().usuarios[0].password)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset('schema')\r",
									"pm.globals.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"quantidade\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"usuarios\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"password\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"administrador\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"email\",\r",
									"            \"password\",\r",
									"            \"administrador\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"quantidade\",\r",
									"    \"usuarios\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "User with repeated Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Tolima Silva\",\r\n  \"email\": \"RepeatTolima@qa.com.br\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('BearerToken', pm.response.json().authorization.split(' ').pop())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{successEmail}}\",\r\n  \"password\": \"{{successPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches fail message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}---\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv')\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(pm.collectionVariables.get('schema'), pm.response.json())).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset('schema')\r",
									"pm.collectionVariables.set('schema', {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"quantidade\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"produtos\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"nome\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"preco\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"descricao\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"quantidade\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"imagem\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"nome\",\r",
									"            \"preco\",\r",
									"            \"descricao\",\r",
									"            \"quantidade\",\r",
									"            \"imagem\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"quantidade\",\r",
									"    \"produtos\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Create message with success\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql('Cadastro realizado com sucesso');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('_id', pm.response.json()._id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{product}}\",\r\n  \"preco\": {{price}},\r\n  \"descricao\": \"{{description}}\",\r\n  \"quantidade\": {{amount}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "product by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset('schema')\r",
									"pm.collectionVariables.set('schema', {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"nome\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"preco\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"descricao\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"quantidade\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"nome\",\r",
									"    \"preco\",\r",
									"    \"descricao\",\r",
									"    \"quantidade\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv')\r",
									"const ajv = new Ajv({allErrors: true, verbose: true})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(pm.collectionVariables.get('schema'), pm.response.json())).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/produtos/{{_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a product by ID",
					"request": {
						"method": "PUT",
						"header": []
					},
					"response": []
				},
				{
					"name": "product By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Validate delete message with success\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/produtos/{{_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ShopCart",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schema",
			"value": ""
		},
		{
			"key": "product",
			"value": "",
			"type": "default"
		},
		{
			"key": "price",
			"value": "",
			"type": "default"
		},
		{
			"key": "description",
			"value": "",
			"type": "default"
		},
		{
			"key": "amount",
			"value": "",
			"type": "default"
		},
		{
			"key": "successEmail",
			"value": "",
			"type": "default"
		},
		{
			"key": "successPassword",
			"value": "",
			"type": "default"
		},
		{
			"key": "BearerToken",
			"value": ""
		},
		{
			"key": "_id",
			"value": ""
		}
	]
}